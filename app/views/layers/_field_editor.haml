.box.right.w30.feditor-sidebar{ko(with: '$root.currentField', visible: '$root.currentField', style: {marginTop: '$root.currentFieldMarginTop'}), style: 'position:relative'}
  %p.title= t('views.layers.form.field.type')
  %p.smalltext= t('views.layers.form.field.the_data_type_to_fill_in_this_field')
  %div{"data-bind" => "text: kind_titleize"}

  /ko if: kind() == 'numeric'
  %br/
  %div
    %label
      %input{ko(checked: 'impl().allowsDecimals'), type: 'checkbox', style: 'float:left;'}
      %div{style: 'width:200px; float:left; margin-top: 1px; color: #555555;'}= t('views.layers.form.field.allow_decimal_numbers')
  %br/
  //ko

  %hr/
  %label{ko(css: {error: :nameError})}= t('views.layers.form.field.name')
  %p.smalltext= t('views.layers.form.field.the_name_of_this_field_as_it_is_presented')
  = ko_text_field_tag :name, hasfocus: :hasFocus, css: {error: :nameError}, html: { id: 'field_name'}

  %hr/
  %label{ko(css: {error: :codeError})}= t('views.layers.form.field.code')
  %p.smalltext= t('views.layers.form.field.the_abbreviation_used_to_report_via_SMS.')
  = ko_text_field_tag :code, css: {error: :codeError}

  %hr/
  %label
    = t('views.layers.form.field.mandatory')
  %p.smalltext= t('views.layers.form.field.this_field_must_be_report_on_every_report') 
  = ko_check_box_tag :is_mandatory, css: {error: :codeError}
  

  /ko if: kind() == 'select_one' || kind() == 'select_many'
  %hr/
  %label{ko(css: {error: 'impl().optionsError'})}= t('views.layers.form.field.options')
  %p.smalltext= t('views.layers.form.field.possible_values_for_this_field')
  %ul.mclist.w40{style: 'width: 282px !important'}

    /ko foreach: impl().options
    %li
      %input.arrowinput{ko(visible: :editing, hasfocus: true, value: :code, valueUpdate: :afterkeydown, event: {keypress: :keyPress, blur: '$root.optionBlur'}), type: :text, style: 'position:relative;top:1px'}
      %span.arrowgrey{ko(visible: '!editing()', click: :edit, text: :code), style: 'cursor:pointer;position:relative;top:-1px'}
      %input.ux-clist{ko(value: :label, valueUpdate: :afterkeydown, event: {blur: '$root.optionBlur'}), type: :text, style: 'width: 150px !important'}
      %button.clist-remove{ko(click: '$root.removeOption'), title: t('views.layers.form.field.remove_option')}
    //ko
    %li{ko(with: '$root.newOption()')}
      %input.arrowinput{ko(value: :code, hasfocus: :hasFocus, valueUpdate: :afterkeydown, event: {keypress: '$root.newOptionKeyPress', blur: '$root.addOption'}), placeholder: "Code", style: 'position:relative;top:2px'}
      %input.ux-text{ko(value: :label, valueUpdate: :afterkeydown, event: {keypress: '$root.newOptionKeyPress', blur: '$root.addOption'}), placeholder: "Label", style: 'width: 150px !important'}
      %button.clist-add{ko(click: '$root.addOption', enable: '$root.optionValid'), title: t('views.layers.form.field.add_option')}
  //ko
  
  /ko if: $root.selectLogicLayers().length > 0
  
  /ko if: kind() == 'yes_no'
  %hr/
  = ko_check_box_tag :is_enable_field_logic, css: {error: :codeError}
  %label
    = t('views.layers.form.field.enable_skip_logic_for_this_field')  

  %div{ko(if: :is_enable_field_logic)}
    = render :partial => "field_logic_yes_no"
  //ko

  /ko if: kind() == 'select_many'
  %hr/
  = ko_check_box_tag :is_enable_field_logic, css: {error: :codeError}
  %label
    = t('views.layers.form.field.enable_skip_logic_for_this_field') 

  %div{ko(if: :is_enable_field_logic)}
    = render :partial => "field_logic_select_many"
  //ko

  /ko if: kind() == 'select_one'
  /ko if: impl().options().length > 0
  %hr/
  = ko_check_box_tag :is_enable_field_logic, css: {error: :codeError}
  %label
    = t('views.layers.form.field.enable_skip_logic_for_this_field')

  %div{ko(if: :is_enable_field_logic)}
    = render :partial => "field_logic_select_one"  
  //ko
  //ko
  
  //ko

  /ko if: kind() == 'numeric'
  %hr/
  = ko_check_box_tag 'impl().is_enable_range', css: {error: :codeError}
  %label
    Enable Range  

  %div{ko(if: 'impl().is_enable_range'), style: 'width:275px'}
    %br/
    %p.smalltext Mininum
    = ko_number_field_tag 'impl().minimum', css: {error: :error}, event: {keydown: 'impl().validate_number_only'}
    %br/
    %br/
    %p.smalltext Maximum
    = ko_number_field_tag 'impl().maximum', css: {error: :error}, event: {keydown: 'impl().validate_number_only'}
  //ko

  /ko if: kind() == 'text'
  = render 'layers/advanced_field_editor'
  //ko

  /ko if: kind() == 'photo'

  //ko

  /ko if: kind() == 'hierarchy'
  %hr/
  %label{ko(css: {error: 'impl().hierarchyError'})}= t('views.layers.form.field.hierarchy')
  %p.smalltext
    = t('views.layers.form.field.upload_a_csv')
    ID, ParentID, ItemName
  %form.hierarchy_form{action: collection_decode_hierarchy_csv_path(collection), method: :post, enctype: 'multipart/form-data', target: 'hierarchy_iframe', style: 'margin-top:6px;margin-bottom:10px'}
    %input{type: :hidden, name: 'authenticity_token', value: form_authenticity_token}
    %input.hierarchy_upload{type: :file, name: :file, id: :hierarchy_upload}
  %iframe#hierarchy_iframe{name: 'hierarchy_iframe', style: 'display:none'}
  /ko if: impl().errorUploadingHierarchy()
  %p
    = t('views.layers.form.field.there_was')
    = link_to t('views.layers.form.field.an_error'), "#", :class => 'error_description_bubble'
    = t('views.layers.form.field.processing_the_hierarchy_file')
  //ko
  /ko if: impl().uploadingHierarchy()
  = t('views.layers.form.field.uploading')
  //ko
  /ko if: !impl().uploadingHierarchy() && impl().hierarchy()
  .hierarchy-container
    /ko template: {name: 'hierarchy-items-template', foreach: impl().hierarchyItems}
    //ko
  //ko
  //ko
  - Field::plugin_kinds.each do |name, kind|
    - if kind[:property_editor]
      <!-- ko if: kind() == '#{name}' -->
      = render kind[:property_editor]
      <!-- /ko -->
  %br/
  %br/

.clear
