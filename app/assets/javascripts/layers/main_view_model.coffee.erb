onLayers ->
  class @MainViewModel
    constructor: (collectionId, layers) ->
      @collectionId = collectionId
      @layers = ko.observableArray $.map(layers, (x) -> new Layer(x))
      @currentLayer = ko.observable()
      @currentField = ko.observable()
      @default_select = '(no value)'

      @newOption = ko.observable(new Option)
      @newFieldLogic = ko.observable(new FieldLogic)     
      @newAttribute = ko.observable(new Attribute)

      @optionValid = ko.computed =>
        $.trim(@newOption().code()).length > 0 && $.trim(@newOption().label()).length > 0

      @fieldLogicValid = ko.computed =>
        $.trim(@newFieldLogic().value()).length > 0 && $.trim(@newFieldLogic().field_id()).length > 0

      @fieldSelectManyLogicValid = ko.computed =>
        # $.trim(@newFieldLogic().value()).length > 0      
        true

      @attributeValid = ko.computed =>
        $.trim(@newAttribute().key()).length > 0 && $.trim(@newAttribute().value()).length > 0 && not Attribute.find(@currentField().impl().attributes(), @newAttribute())

      @optionsLayers = ko.observableArray $.map(@layers(), (l) -> [[l.name(), l.id()]])

      @currentFieldMarginTop = ko.computed =>
        if @currentLayer()
          idx = @currentLayer().fields().indexOf(@currentField())
          margin = idx * 73
          margin += 3 if idx > 0
          "#{margin}px"
        else
          0

      @savingLayer = ko.observable(false)

      @selectLogicLayers = ko.computed =>
        if @currentLayer()
          if @currentLayer().id()
            # @layers().filter (layer) => layer.id() isnt @currentLayer().id()
            @layers()
          else
            @layers().filter (layer) => typeof layer.id() isnt 'undefined'
        else
          []

      @is_editing = ko.computed =>
        if @currentField() and @currentField().kind() == "select_many"
          for f in @currentField().impl().selected_field_logics()
            if f.editing() == true
              return true
          if @currentField().impl().field_logics().length > 0
            return true
          return false
        return false

    newLayer: =>
      layer = new Layer ord: (@layers().length + 1)
      @layers.push(layer)
      @currentLayer(layer)
      layer.hasFocus(true)

    editLayer: (layer) =>
      @originalFields = $.map(layer.fields(), (x) -> new Field(layer, x.toJSON()))
      @currentLayer(layer)
      @currentField(layer.fields()[0]) if layer.fields().length > 0
      layer.hasFocus(true)

    cancelLayer: =>
      if @currentLayer().id()
        @currentLayer().fields.removeAll()
        @currentLayer().fields.push(field) for field in @originalFields
      else
        @layers.remove(@currentLayer()) unless @currentLayer().id()
      @currentLayer(null)
      @currentField(null)

    saveLayer: =>
      @savingLayer(true)
      # @currentField().impl().field_logics @currentField().impl().field_logics().filter (field_logic) -> typeof field_logic.layer_id() isnt 'undefined'
      

      json = {layer: @currentLayer().toJSON()}

      if @currentLayer().id()
        json._method = 'put'
        $.post "/collections/#{@collectionId}/layers/#{@currentLayer().id()}.json", json, @saveLayerCallback
      else
        $.post "/collections/#{@collectionId}/layers.json", json, @saveLayerCallback

    saveLayerCallback: (data) =>
      #if layer is new, we need to set id
      if @currentLayer().id()
        $.status.showNotice(window.t('javascripts.layers.successfully_saved', {name: @currentLayer().name()}), 2000)
      else
        $.status.showNotice(window.t('javascripts.layers.successfully_created', {name: @currentLayer().name()}), 2000)
      @currentLayer().id(data.id)
      layersToReloadOrder = [@currentLayer()]

      i = 0
      while i < @currentLayer().fields().length
        field = @currentLayer().fields()[i]
        dataField = (dataField for dataField in data.fields when dataField.code is field.code())
        if dataField.length
          i += 1
          #if field is new, we need to set id
          field.id(dataField[0].id)
        else
          field.layer().fields().push(field)
          layersToReloadOrder.push(field.layer())
          @currentLayer().fields.remove(field)
          # i does not change because we just removed an element

      @reloadOrder(layer) for layer in layersToReloadOrder

      @currentLayer(null)
      @currentField(null)

      @savingLayer(false)

    saveLayerOrd: (layer) =>
      json = {ord: layer.ord()}

      json._method = 'put'
      $.post "/collections/#{@collectionId}/layers/#{layer.id()}/set_order.json", json

    deleteLayer: (layer) =>
      # if confirm("This layer is being used with #{layer.threshold_ids.length} alerts. The alert associated with this layer will also be deleted.")
      if layer.threshold_ids.length == 0
        $.post "/collections/#{@collectionId}/layers/#{layer.id()}", {threshold_ids: layer.threshold_ids, _method: 'delete'}, =>
          idx = @layers().indexOf(layer)
          for nextLayer in @layers().slice(idx + 1)
            nextLayer.ord(nextLayer.ord() - 1)
            @saveLayerOrd(nextLayer)

          @layers.remove(layer)

          $.status.showNotice("Layer '#{layer.name()}' successfully deleted", 2000)
      else
          $.status.showError("This layer is being used with #{layer.threshold_ids.length} alert(s), you are not allowed to delete", 2000)

    selectingLayer: =>
      alert 'selectingLayer'

    isFirstLayer: (layer) => layer.ord() == 1
    isLastLayer: (layer) => layer.ord() == @layers().length

    moveLayerDown: (layer) =>
      nextLayer = @layers()[layer.ord()]
      layer.ord(layer.ord() + 1)
      nextLayer.ord(nextLayer.ord() - 1)
      @saveLayerOrd(layer)
      @saveLayerOrd(nextLayer)
      @layers.sort((x, y) -> if x.ord() < y.ord() then -1 else 1)

    moveLayerUp: (layer) =>
      @moveLayerDown @layers()[layer.ord() - 2]

    isFirstField: (layer, field) => field.ord() == 1
    isLastField: (layer, field) => field.ord() == layer.fields().length

    moveFieldDown: (field) =>
      nextField = @currentLayer().fields()[field.ord()]
      field.ord(field.ord() + 1)
      nextField.ord(nextField.ord() - 1)
      @currentLayer().fields.sort((x, y) -> if x.ord() < y.ord() then -1 else 1)

    moveFieldUp: (field) =>
      @moveFieldDown @currentLayer().fields()[field.ord() - 2]

    newField: (kind) =>
      # @fieldLogic(new FieldLogic())
      @currentField(new Field(@currentLayer(), kind: kind, ord: @currentLayer().fields().length + 1))
      @currentLayer().fields.push(@currentField())
      @currentField().hasFocus(true)
      # @currentField().field_logic(@currentField())

    selectField: (field) =>
      @currentField(field)
      @currentField().hasFocus(true)

    reloadOrder: (layer) =>
      i = 1
      for field in layer.fields()
        field.ord(i)
        i += 1

    deleteField: (field) =>
      idx = @currentLayer().fields().indexOf(field)
      nextField.ord(nextField.ord() - 1) for nextField in @currentLayer().fields().slice(idx + 1)
      @currentLayer().fields.remove(field)
      if @currentLayer().fields().length == 0
        @currentField(null)
      else
        idx -= 1 if idx >= @currentLayer().fields().length
        @currentField(@currentLayer().fields()[idx])
        @currentField().hasFocus(true)

    newOptionKeyPress: (field, event) =>
      switch event.keyCode
        when 13 then @addOption()
        else true

    newAttributeKeyPress: (field, event) =>
      switch event.keyCode
        when 13 then @addAttribute()
        else true

    optionBlur: (option) =>
      option.editing(false)
      if $.trim(option.code()).length == 0 && $.trim(option.length()).length == 0
        @removeOption(option)

    attributeBlur: (attribute) =>
      attribute.editing(false)
      if $.trim(attribute.code()).length == 0 && $.trim(attribute.length()).length == 0
        @removeAttribute(attribute)



    addOption: =>
      return unless @optionValid()
      @newOption().hasFocus = false
      @currentField().impl().addOption(@newOption())
      option = new Option
      option.hasFocus(true)
      @newOption(option)

    addFieldLogic: =>
      return unless @fieldLogicValid()
      @currentField().impl().addFieldLogic(@newFieldLogic())
      field_logic = new FieldLogic
      @newFieldLogic(field_logic)

    createNewFieldLogic: =>
      field_logic = new FieldLogic
      @newFieldLogic(field_logic)
      @currentField().impl().add_field_logic(@newFieldLogic())
      @newFieldLogic().condition_type("any")

    assignConditionAll: =>
      @newFieldLogic().condition_type("all")

    assignConditionAny: =>
      @newFieldLogic().condition_type("any")

    saveNewFieldLogic: =>

    addOptionFieldLogic: (field) =>
      option = $.map(@currentField().impl().options(), (x) -> x if x.id() == field.value())
      if option.length > 0
        field_logic_value = new FieldLogicValue( 
          label:option[0].label()
          value: option[0].id()
        )
        tmp = @newFieldLogic().selected_options()
        tmp.push(field_logic_value)
        @newFieldLogic().selected_options([])
        @newFieldLogic().selected_options(tmp)


    removeOptionFieldLogic: (field) =>
      @newFieldLogic().selected_options.remove(field)

    saveFieldLogic: (field_logic) =>
      @currentField().impl().save_field_logic(field_logic)
      @currentField().impl().field_logics.remove(field_logic)

    to_field_name: (field) =>
      if @currentLayer()
        for l in @layers()
          f = $.map(l.fields(), (x) -> x if x.id() == parseInt(field()[0]))
          if(f.length > 0)
            return f[0].name()
      return ""

    editFieldLogic: (field) =>
      for f in @currentField().impl().selected_field_logics()
        if f.editing() == true
          f.selected_options(@currentFieldLogic.selected_options())
          f.field_id(@currentFieldLogic.field_id())
          f.condition_type(@currentFieldLogic.condition_type())
          f.editing(false)
      @currentFieldLogic = new FieldLogic
      for op in field.selected_options()
        @currentFieldLogic.selected_options.push(op)
      @currentFieldLogic.field_id(field.field_id())
      @currentFieldLogic.condition_type(field.condition_type())
      field.editing(true)
      @currentField().impl().field_logics([])
      @newFieldLogic(field)

    cancelFieldLogic: (field) =>
      for f in @currentField().impl().selected_field_logics()
        if f.editing() == true
          f.selected_options(@currentFieldLogic.selected_options())
          f.field_id(@currentFieldLogic.field_id())
          f.condition_type(@currentFieldLogic.condition_type())
          f.editing(false)
      @currentFieldLogic = null      
      field.editing(false)

    updateFieldLogic: (field) =>
      field.editing(false)

    addAttribute: =>
      return unless @attributeValid()
      @newAttribute().hasFocus = false
      @currentField().impl().addAttribute(@newAttribute())
      attribute = new Attribute
      attribute.hasFocus(true)
      @newAttribute(attribute)

    removeOption: (option) =>
      @currentField().impl().options.remove(option)
      @newOption().hasFocus(true)

    removeFieldLogic: (field_logic) =>
      @currentField().impl().field_logics.remove(field_logic)

    removeSelectedFieldLogic: (field_logic) =>
      @currentField().impl().selected_field_logics.remove(field_logic)

    removeAttribute: (attribute) =>
      @currentField().impl().attributes.remove(attribute)
      @newAttribute().hasFocus(true)

    startUploadHierarchy: =>
      @currentField().impl().uploadingHierarchy(true)

    hierarchyUploaded: (hierarchy) =>
      @currentField().impl().setHierarchy(hierarchy)

    errorUploadingHierarchy: (hierarchy_errors) =>
      @currentField().impl().uploadingHierarchy(false)
      @currentField().impl().errorUploadingHierarchy(true)

      $('.error_description_bubble').CreateBubblePopup({
        selectable: true,
        position : 'top',
        innerHtml: hierarchy_errors,
        innerHtmlStyle: {
            color:'#000000',
            'background-color' :'white'
            },
        themeName:  'bubble',
        themePath:  '<%= InsteddRails.url %>/theme/images/'

      });

    change: =>
      alert 'test'